https://start.spring.io/ -> to create the spring boot app

http status code:

    200 to 299->success status code
    400 to 499 -> failure.due to internal server error
    500 to 599 -> failure.due to error in client request


    200->success status code
    404->Page Not found

Controller
	receive the request from the client and send back with response.it will call service if necessary 

Service
	Business layer will help to add the logic and bridge between controller and repo.


Model & Repo(DAO)
	ORM->Object relation mapping(each table will have one pojo class with db fields)
	Repo->to run the DB queries(CRUD)


Java annotations will help us add logics the methods.
    in spring boot,it has predefined annotations will help us add logics to the methods.


Controller:
  @RestController
            should be on top of the class
            will send the response as text data or json data.
  @Controller->
              should be on top of the class
              will send the response as html page.


  @RequestParam
            to recv the http params.(can be used in file upload or image upload)
  @PathVariable
    to recv the data in the url itself
  @RequestBody
        to send the data in request body of the http request.

  @GetMapping->should be on top of the method
  @PostMapping->should be on top of the method
  @PutMapping->should be on top of the method
  @PatchMapping->should be on top of the method
  @DeleteMapping->should be on top of the method
  @RequestMapping->can be on top of the method or class
  @ResponseEntity->Method return type only in controller.

Service:
  @Service
    should be on top of the class


Model:
  @Entity->on top of the class
  @Table(name="Db_table_name")->on top of the class

  @id->PK field(mandatory)->->on top of the field


Repo:
    @Repository->on the top of the interface.It should extends with JPARepo.



@Autowired
 will inject necessary  dependency between the layers.


 for JPA and mysql connection,need to add two dependencies
    1.mysql driver
    2.jpa repo.



Create a controller and register
		1.create customer controller and register
		2.CustomerReq to recv the args  from the postman
Create a customer service.
	storeUser with args of CustomerReq

Create a CustomerRepo and Customermodel

Inject the CustomerRepo in customerservice.
Inject the customerservice in customer controller

